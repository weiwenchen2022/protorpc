// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-netrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-netgrpc v0.1.0
// - protoc             v4.23.4
// source: helloworld.proto

package helloworld

import (
	errors "errors"
	rpc "net/rpc"
)

const (
	Greeter_SayHello_FullMethodName = "helloworld.Greeter.SayHello"
)

// GreeterClient is the client API for Greeter service.
type GreeterClient interface {
	// Sends a greeting
	SayHello(args *HelloRequest, reply *HelloReply) error
	// Sends a greeting
	SayHelloAsync(args *HelloRequest, reply *HelloReply, done chan *rpc.Call) *rpc.Call
}

type greeterClient struct {
	*rpc.Client
}

func NewGreeterClient(client *rpc.Client) GreeterClient {
	return &greeterClient{client}
}

func (client *greeterClient) SayHello(args *HelloRequest, reply *HelloReply) error {
	err := client.Client.Call(Greeter_SayHello_FullMethodName, args, reply)
	if err != nil {
		return err
	}
	return nil
}

func (client *greeterClient) SayHelloAsync(args *HelloRequest, reply *HelloReply, done chan *rpc.Call) *rpc.Call {
	return client.Client.Go(Greeter_SayHello_FullMethodName, args, reply, done)
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Sends a greeting
	SayHello(*HelloRequest, *HelloReply) error

	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) SayHello(*HelloRequest, *HelloReply) error {
	return errors.New("method SayHello not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

func RegisterGreeterServer(s *rpc.Server, srv GreeterServer) {
	s.RegisterName(Greeter_ServiceName, srv)
}

// Greeter_ServiceName is the rpc.ServiceDesc for Greeter service.
// It's only intended for direct use with rpc.RegisterName.
const Greeter_ServiceName = "helloworld.Greeter"
